"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4376],{2421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(5893),o=t(1151);const i={slug:"version-4.0.0",title:"Version 4.0.0",authors:"trygve",tags:["podium","version","release"]},a=void 0,l={permalink:"/blog/version-4.0.0",editUrl:"https://github.com/podium-lib/podium-lib.github.io/tree/main/website/blog/blog/2019-06-14-version-4.0.0.md",source:"@site/blog/2019-06-14-version-4.0.0.md",title:"Version 4.0.0",description:"We are very happy to release version 4.0.0 of Podium. Both @podium/layout and",date:"2019-06-14T00:00:00.000Z",formattedDate:"June 14, 2019",tags:[{label:"podium",permalink:"/blog/tags/podium"},{label:"version",permalink:"/blog/tags/version"},{label:"release",permalink:"/blog/tags/release"}],readingTime:4.57,hasTruncateMarker:!0,authors:[{name:"Trygve Lie",title:"Lead maintainer",url:"https://github.com/trygve-lie/",imageURL:"https://github.com/trygve-lie.png",key:"trygve"}],frontMatter:{slug:"version-4.0.0",title:"Version 4.0.0",authors:"trygve",tags:["podium","version","release"]},unlisted:!1,prevItem:{title:"Version 4.1.0",permalink:"/blog/version-4.1.0"},nextItem:{title:"New documentation site",permalink:"/blog/first-blog-post"}},r={authorsImageUrls:[void 0]},c=[{value:"JSON Schema",id:"json-schema",level:3},{value:"Document template",id:"document-template",level:3},{value:"HTTP framework free",id:"http-framework-free",level:3},{value:"Multiple assets support",id:"multiple-assets-support",level:3},{value:"Layout assets",id:"layout-assets",level:3},{value:"HttpIncoming replaces context argument",id:"httpincoming-replaces-context-argument",level:3},{value:"The fetch method now resolves with a response object",id:"the-fetch-method-now-resolves-with-a-response-object",level:3},{value:"State events",id:"state-events",level:3},{value:"Improved documentation",id:"improved-documentation",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["We are very happy to release version 4.0.0 of Podium. Both ",(0,s.jsx)(n.code,{children:"@podium/layout"})," and\n",(0,s.jsx)(n.code,{children:"@podium/podlet"})," are now available at v4.0.0."]}),"\n",(0,s.jsx)(n.p,{children:"Version 4.0.0 attempts to be almost entirely backwards compatible with version 3.0.0."}),"\n",(0,s.jsx)(n.p,{children:"This release contains the following changes:"}),"\n",(0,s.jsx)(n.h3,{id:"json-schema",children:"JSON Schema"}),"\n",(0,s.jsxs)(n.p,{children:["The manifest which defines the contract between layouts and podlets are now\ndefined using ",(0,s.jsx)(n.a,{href:"https://github.com/podium-lib/schemas/blob/master/lib/manifest.schema.json",children:"JSON Schema"}),". The main reason for this is to cater for Podium implementations\nin languages other than Node.js."]}),"\n",(0,s.jsx)(n.h3,{id:"document-template",children:"Document template"}),"\n",(0,s.jsx)(n.p,{children:"This version introduces a concept we call a document template.\nA document template is intended to supply the necessary HTML for the page outside of the markup you need write to display your page content."}),"\n",(0,s.jsx)(n.p,{children:"While a v4 ships with a default document template it's straight forward to build your own custom template and plug this into both layouts and podlets\nwhich helps make it easier to develop podlets in isolation (from layouts) while imposing the same constraints on it that it will have when included in a layout."}),"\n",(0,s.jsxs)(n.p,{children:["Please see the ",(0,s.jsx)(n.a,{href:"/docs/api/document",children:"document template"})," section for further\ninformation."]}),"\n",(0,s.jsx)(n.h3,{id:"http-framework-free",children:"HTTP framework free"}),"\n",(0,s.jsx)(n.p,{children:"Originally Podium was bound to Express.js but with this release Podium is 100%\nHTTP framework free. It is even possible write Podium servers using only the core Node.js HTTP\nserver module."}),"\n",(0,s.jsx)(n.p,{children:"Having said this, Express.js is still first class in Podium which means it is still possible to use Podium in\nan Express.js server without anything more than the core Podium layout and podlet modules."}),"\n",(0,s.jsx)(n.p,{children:"Besides supporting Express.js, Hapi and Fastify are supported through plugins maintained by\nthe Podium team."}),"\n",(0,s.jsx)(n.p,{children:"Serverless / cloud functions will also be supported in a future release."}),"\n",(0,s.jsx)(n.h3,{id:"multiple-assets-support",children:"Multiple assets support"}),"\n",(0,s.jsxs)(n.p,{children:["It was previously only possible to set a single reference to JavaScript and CSS client side assets using a podlet's\n",(0,s.jsx)(n.code,{children:".js()"})," and ",(0,s.jsx)(n.code,{children:".css()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"With version 4, it is now possible to call these methods multiple times to set multiple assets."}),"\n",(0,s.jsxs)(n.p,{children:["An additional ",(0,s.jsx)(n.code,{children:"type"})," field has also been added to the ",(0,s.jsx)(n.code,{children:".js()"})," method making it possible to signal to layout servers\nwhat type of JavaScript file are being specified."]}),"\n",(0,s.jsx)(n.h3,{id:"layout-assets",children:"Layout assets"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@podium/layout"})," module now has ",(0,s.jsx)(n.code,{children:".js()"})," and ",(0,s.jsx)(n.code,{children:".css()"})," methods which work the\nsame way as in ",(0,s.jsx)(n.code,{children:"@podium/podlet"}),". The intent is to be able to set client side assets\nwhich are related specifically to the layout."]}),"\n",(0,s.jsx)(n.h3,{id:"httpincoming-replaces-context-argument",children:"HttpIncoming replaces context argument"}),"\n",(0,s.jsxs)(n.p,{children:["During the process of rewriting to HTTP framework free, an ",(0,s.jsx)(n.code,{children:"HttpIncoming"})," object was introduced which\nis passed between the various parts of Podium."]}),"\n",(0,s.jsxs)(n.p,{children:["You can read more about ",(0,s.jsxs)(n.a,{href:"/docs/api/incoming",children:[(0,s.jsx)(n.code,{children:"HttpIncoming"})," and its role here"]}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Due to this, you should pass an instance of ",(0,s.jsx)(n.code,{children:"HttpIncoming"})," (available at ",(0,s.jsx)(n.code,{children:"res.locals.podium"})," in express) to the ",(0,s.jsx)(n.code,{children:".client.fetch()"})," and ",(0,s.jsx)(n.code,{children:".client.stream()"})," methods in\na ",(0,s.jsx)(n.code,{children:"@podium/layout"})," instead of the context."]}),"\n",(0,s.jsx)(n.p,{children:"Previously Podium expected you to pass a Podium context to the fetch method like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get('/', (req, res) => {\n    const ctx = res.locals.podium.context;\n    const content = await podlet.fetch(ctx);\n    ...\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will still work until Podium version 5 but it is expected that developers instead call fetch as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get('/', (req, res) => {\n    const incoming = res.locals.podium;\n    const content = await podlet.fetch(incoming);\n    ...\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The context is part of ",(0,s.jsx)(n.code,{children:"HttpIncoming"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"the-fetch-method-now-resolves-with-a-response-object",children:"The fetch method now resolves with a response object"}),"\n",(0,s.jsx)(n.p,{children:"When a Layout retrieves the content from a podlet it will now resolve with a\nresponse object instead of just the content as a string."}),"\n",(0,s.jsxs)(n.p,{children:["Previously calling ",(0,s.jsx)(n.code,{children:".client.fetch()"})," would resolve with the content of a podlet as\na string:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get('/', (req, res) => {\n    const incoming = res.locals.podium;\n    const content = await podlet.fetch(incoming);\n    console.log(content);  // <div> .... </div>\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now the fetch method with resolve with and object containing the podlet's content, css, js and\nheaders:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get('/', (req, res) => {\n    const incoming = res.locals.podium;\n    const content = await podlet.fetch(incoming);\n    console.log(content);  // {js: [], css: [], headers: {}, content: '<div> .... </div>'}\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"For backwards compabillity, using the response in a template literal or in string\nconcatenation will result in the content value in the string. This will still work until\nPodium version 5."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get('/', (req, res) => {\n    const incoming = res.locals.podium;\n    const content = await podlet.fetch(incoming);\n    console.log(`${content}`);  // <div> .... </div>\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".client.stream()"})," works as before, but there is now a ",(0,s.jsx)(n.code,{children:"beforeStream"})," event\nwhich emits a response object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get('/', (req, res, next) => {\n    const incoming = res.locals.podium;\n\n    const stream = component.stream(incoming);\n    stream.once('beforeStream', data => {\n        console.log(data); // {js: [], css: [], headers: {}, content: null}\n    });\n\n    stream.pipe(res);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"state-events",children:"State events"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".client"})," in ",(0,s.jsx)(n.code,{children:"@podium/layout"})," now has an extended ",(0,s.jsx)(n.code,{children:"state"})," event and ",(0,s.jsx)(n.code,{children:".state"}),"\nproperty can be used to determine what state a layout is in."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"layout.client.on('state', state => {\n    console.log(state);\n});\n\nconst podlet = layout.client.register({\n    uri: 'http://foo.site.com/manifest.json',\n    name: 'foo',\n});\n\napp.get('/', (req, res) => {\n    const incoming = res.locals.podium;\n    const content = await podlet.fetch(incoming);\n    ...\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:'The state provides information about the "podlet update life cycle". This is\nuseful for determining when a podlet is being updated and when an update is\ncomplete or if a podlet is in an unhealty state.'}),"\n",(0,s.jsx)(n.h3,{id:"improved-documentation",children:"Improved documentation"}),"\n",(0,s.jsx)(n.p,{children:"In the process of making Podium HTTP framework free and supporting multiple\nHTTP framework our documentation site has received some polish."}),"\n",(0,s.jsx)(n.p,{children:"This site will now hold all documentation for end users of Podium and eventually it will\nhave code examples reflecting all HTTP frameworks which are officially supported."}),"\n",(0,s.jsx)(n.p,{children:"From now on, the documentation found in the README's in each module is to be\nconsidered documentation for developing Podium and not end user documentation."})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var s=t(7294);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);