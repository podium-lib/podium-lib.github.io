"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5167],{827:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var s=t(5893),l=t(1151),a=t(4866),r=t(5162);const o={id:"podlet",title:"@podium/podlet"},d=void 0,i={id:"api/podlet",title:"@podium/podlet",description:"Module for building page fragment servers for micro frontend architectures.",source:"@site/docs/api/podlet.md",sourceDirName:"api",slug:"/api/podlet",permalink:"/docs/api/podlet",draft:!1,unlisted:!1,editUrl:"https://github.com/podium-lib/podium-lib.github.io/tree/main/website/docs/docs/api/podlet.md",tags:[],version:"current",frontMatter:{id:"podlet",title:"@podium/podlet"},sidebar:"sidebar",previous:{title:"Document Template",permalink:"/docs/api/document"},next:{title:"@podium/layout",permalink:"/docs/api/layout"}},c={},p=[{value:"Installation",id:"installation",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Constructor",id:"constructor",level:2},{value:"options",id:"options",level:4},{value:"name",id:"name",level:5},{value:"pathname",id:"pathname",level:5},{value:"version",id:"version",level:5},{value:"manifest",id:"manifest",level:5},{value:"content",id:"content",level:5},{value:"fallback",id:"fallback",level:5},{value:"logger",id:"logger",level:5},{value:"development",id:"development",level:5},{value:"Podlet Instance",id:"podlet-instance",level:2},{value:".middleware()",id:"middleware",level:3},{value:".manifest(options)",id:"manifestoptions",level:3},{value:"options",id:"options-1",level:4},{value:"prefix",id:"prefix",level:5},{value:".content(options)",id:"contentoptions",level:3},{value:"options",id:"options-2",level:4},{value:"prefix",id:"prefix-1",level:5},{value:".fallback(options)",id:"fallbackoptions",level:3},{value:"options",id:"options-3",level:4},{value:"prefix",id:"prefix-2",level:5},{value:".js(options|[options])",id:"jsoptionsoptions",level:3},{value:"options",id:"options-4",level:4},{value:"value",id:"value",level:5},{value:"prefix",id:"prefix-3",level:5},{value:"type",id:"type",level:5},{value:".css(options|[options])",id:"cssoptionsoptions",level:3},{value:"options",id:"options-5",level:4},{value:"value",id:"value-1",level:5},{value:"prefix",id:"prefix-4",level:5},{value:"<code>.proxy({ target, name })</code>",id:"proxy-target-name-",level:3},{value:".defaults(context)",id:"defaultscontext",level:3},{value:".pathname()",id:"pathname-1",level:3},{value:".view(template)",id:"viewtemplate",level:3},{value:".render(HttpIncoming, fragment, [args])",id:"renderhttpincoming-fragment-args",level:3},{value:"HttpIncoming (required)",id:"httpincoming-required",level:4},{value:"fragment",id:"fragment",level:4},{value:"[args]",id:"args",level:4},{value:".process(HttpIncoming)",id:"processhttpincoming",level:3},{value:"HttpIncoming (required)",id:"httpincoming-required-1",level:4},{value:"res.podiumSend(fragment)",id:"respodiumsendfragment",level:2},{value:"Development mode",id:"development-mode",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Module for building page fragment servers for micro frontend architectures."}),"\n",(0,s.jsxs)(n.p,{children:["A podlet server is responsible for generating HTML fragments which can then be\nused in a ",(0,s.jsx)(n.a,{href:"https://github.com/podium-lib/layout",title:"@podium/layout",children:"@podium/layout"})," server to compose a full HTML page."]}),"\n",(0,s.jsx)(n.p,{children:"This module can be used together with a plain Node.js HTTP server or any HTTP\nframework and any templating language of your choosing (or none if you prefer)."}),"\n",(0,s.jsxs)(n.p,{children:["Connect compatible middleware based frameworks (such as ",(0,s.jsx)(n.a,{href:"https://expressjs.com/",title:"Express",children:"Express"}),") are\nconsidered first class in Podium and so this module provides a ",(0,s.jsx)(n.code,{children:".middleware()"}),"\nmethod for convenience."]}),"\n",(0,s.jsxs)(n.p,{children:["For writing podlet servers with other HTTP frameworks, please see the\n",(0,s.jsx)(n.a,{href:"/docs/api/getting_started#http-framework-compabillity",children:"HTTP Framework Compabillity"}),"\nsection."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ npm install @podium/podlet\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ npm install @podium/podlet\n$ npm install @podium/hapi-podlet\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ npm install @podium/podlet\n$ npm install @podium/fastify-podlet\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsx)(n.p,{children:"Building a simple podlet server."}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const express = require('express');\nconst Podlet = require('@podium/podlet');\n\nconst app = express();\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    development: true,\n});\n\napp.use(podlet.middleware());\n\napp.get(podlet.content(), (req, res) => {\n    if (res.locals.podium.context.locale === 'nb-NO') {\n        return res.status(200).podiumSend('<h2>Hei verden</h2>');\n    }\n    res.status(200).podiumSend(`<h2>Hello world</h2>`);\n});\n\napp.get(podlet.manifest(), (req, res) => {\n    res.status(200).send(podlet);\n});\n\napp.listen(7100);\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const HapiPodlet = require('@podium/hapi-podlet');\nconst Podlet = require('@podium/podlet');\nconst Hapi = require('hapi');\n\nconst app = Hapi.Server({\n    host: 'localhost',\n    port: 7100,\n});\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    development: true,\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.content(),\n    handler: (request, h) => {\n        if (request.app.podium.context.locale === 'nb-NO') {\n            return h.podiumSend('<h2>Hei verden</h2>');\n        }\n        return h.podiumSend('<h2>Hello world</h2>');\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.manifest(),\n    handler: (request, h) => JSON.stringify(podlet),\n});\n\napp.start();\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const fastifyPodlet = require('@podium/fastify-podlet');\nconst fastify = require('fastify');\nconst Podlet = require('@podium/podlet');\n\nconst app = fastify();\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    development: true,\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get(podlet.content(), async (request, reply) => {\n    if (reply.app.podium.context.locale === 'nb-NO') {\n        reply.podiumSend('<h2>Hei verden</h2>');\n        return;\n    }\n    reply.podiumSend('<h2>Hello world</h2>');\n});\n\napp.get(podlet.manifest(), async (request, reply) => {\n    reply.send(podlet);\n});\n\nconst start = async () => {\n    try {\n        await app.listen(7100);\n        app.log.info(`server listening on ${app.server.address().port}`);\n    } catch (err) {\n        app.log.error(err);\n        process.exit(1);\n    }\n};\nstart();\n"})})}),(0,s.jsx)(r.Z,{value:"http",label:"HTTP",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { HttpIncoming } = require('@podium/utils');\nconst Podlet = require('@podium/podlet');\nconst http = require('http');\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    development: true,\n});\n\nconst server = http.createServer(async (req, res) => {\n    let incoming = new HttpIncoming(req, res);\n    incoming = await podlet.process(incoming);\n\n    if (incoming.url.pathname === podlet.manifest()) {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('podlet-version', podlet.version);\n        res.end(JSON.stringify(podlet));\n        return;\n    }\n\n    if (incoming.url.pathname === podlet.content()) {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'text/html');\n        res.setHeader('podlet-version', podlet.version);\n\n        if (incoming.context.locale === 'nb-NO') {\n            res.end(podlet.render(incoming, '<h2>Hei verden</h2>'));\n            return;\n        }\n        res.end(podlet.render(incoming, '<h2>Hello world</h2>'));\n        return;\n    }\n\n    res.statusCode = 404;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Not found');\n});\n\nserver.listen(7100);\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsx)(n.p,{children:"Create a new Podlet instance."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet(options);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"options",children:"options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"option"}),(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"default"}),(0,s.jsx)(n.th,{children:"required"}),(0,s.jsx)(n.th,{children:"details"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Name that the Podlet identifies itself by"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"pathname"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Pathname of where a Podlet is mounted in an HTTP server"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"version"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"The current version of the podlet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"manifest"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/manifest.json"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Defines the pathname for the manifest of the podlet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"content"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Defines the pathname for the content of the podlet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"fallback"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Defines the pathname for the fallback of the podlet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"logger"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"null"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"A logger which conforms to a log4j interface"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"development"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Turns development mode on or off"})]})]})]}),"\n",(0,s.jsx)(n.h5,{id:"name",children:"name"}),"\n",(0,s.jsx)(n.p,{children:"The name that the podlet identifies itself by. This is used internally for things\nlike metrics but can also be used by a layout server."}),"\n",(0,s.jsx)(n.p,{children:"This value must be in camelCase."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet';\n});\n"})}),"\n",(0,s.jsx)(n.h5,{id:"pathname",children:"pathname"}),"\n",(0,s.jsx)(n.p,{children:"Pathname for where a podlet is mounted in an HTTP server. It is important that\nthis value matches where the entry point of a route is in an HTTP server since\nthis value is used to define where the manifest is for the podlet."}),"\n",(0,s.jsxs)(n.p,{children:['If the podlet is mounted at the "root", set ',(0,s.jsx)(n.code,{children:"pathname"})," to ",(0,s.jsx)(n.code,{children:"/"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.use(podlet.middleware());\n\napp.get('/', (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: '/',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get('/', async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["If the podlet is to be mounted at ",(0,s.jsx)(n.code,{children:"/foo"}),", set the pathname to ",(0,s.jsx)(n.code,{children:"/foo"})," and mount\nmiddleware and routes at or under ",(0,s.jsx)(n.code,{children:"/foo"})]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n});\n\napp.use('/foo', podlet.middleware());\n\napp.get('/foo', (req, res, next) => {\n    [ ... ]\n});\n\napp.get('/foo/:id', (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: '/foo',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: '/foo/{id}',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get('/foo', async (request, reply) => {\n    [ ... ]\n});\n\napp.get('/foo/:id', async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsx)(n.h5,{id:"version",children:"version"}),"\n",(0,s.jsx)(n.p,{children:"The current version of the podlet. It is important that this value be updated\nwhen a new version of the podlet is deployed since the page (layout) that the\npodlet is displayed in uses this value to know whether to refresh the podlet's\nmanifest and fallback content or not."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    version: '1.1.0';\n});\n"})}),"\n",(0,s.jsx)(n.h5,{id:"manifest",children:"manifest"}),"\n",(0,s.jsxs)(n.p,{children:["Defines the pathname for the manifest of the podlet. Defaults to\n",(0,s.jsx)(n.code,{children:"/manifest.json"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The value should be relative to the value set on the ",(0,s.jsx)(n.code,{children:"pathname"})," argument. In\nother words if a podlet is mounted into an HTTP server at ",(0,s.jsx)(n.code,{children:"/foo"})," and the\nmanifest is at ",(0,s.jsx)(n.code,{children:"/foo/component.json"}),", set the pathname and manifest as follows:"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    manifest: '/component.json',\n});\n\napp.get('/foo/component.json', (req, res, next) => {\n    res.status(200).json(podlet);\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    manifest: '/component.json',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: '/foo/component.json',\n    handler: (request, h) => JSON.stringify(podlet),\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    manifest: '/component.json',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get('/foo/component.json', async (request, reply) => {\n    reply.send(podlet);\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".manifest()"})," method can be used to retrieve the value after it has been\nset."]}),"\n",(0,s.jsx)(n.h5,{id:"content",children:"content"}),"\n",(0,s.jsxs)(n.p,{children:["Defines the pathname for the content of the Podlet. The value can be a relative\nor absolute URL. Defaults to ",(0,s.jsx)(n.code,{children:"/"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If the value is relative, the value should be relative to the value set using the\n",(0,s.jsx)(n.code,{children:"pathname"})," argument. For example, if a podlet is mounted into an HTTP server\nat ",(0,s.jsx)(n.code,{children:"/foo"})," and the content is served at ",(0,s.jsx)(n.code,{children:"/foo/index.html"}),", set pathname and content as\nfollows:"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    content: '/index.html',\n});\n\napp.get('/foo/index.html', (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    content: '/index.html',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: '/foo/index.html',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    content: '/index.html',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get('/foo/index.html', async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".content()"})," method can be used to retrieve the value after it has been set."]}),"\n",(0,s.jsx)(n.h5,{id:"fallback",children:"fallback"}),"\n",(0,s.jsx)(n.p,{children:"Defines the pathname for the fallback of the Podlet. The value can be a relative\nor absolute URL. Defaults to an empty string."}),"\n",(0,s.jsxs)(n.p,{children:["If the value is relative, the value should be relative to the value set with the\n",(0,s.jsx)(n.code,{children:"pathname"})," argument. If a podlet is mounted into an HTTP server\nat ",(0,s.jsx)(n.code,{children:"/foo"})," and the fallback is at ",(0,s.jsx)(n.code,{children:"/foo/fallback.html"}),", set pathname and fallback\nas follows:"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    fallback: '/fallback.html',\n});\n\napp.get('/foo/fallback.html', (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    fallback: '/fallback.html',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: '/foo/fallback.html',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    fallback: '/fallback.html',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get('/foo/fallback.html', async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".fallback()"})," method can be used to retrieve the value after it has been\nset."]}),"\n",(0,s.jsx)(n.h5,{id:"logger",children:"logger"}),"\n",(0,s.jsx)(n.p,{children:"Any log4j compatible logger can be passed in and will be used for logging.\nConsole is also supported for easy test / development."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    logger: console;\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Under the hood ",(0,s.jsx)(n.a,{href:"https://github.com/trygve-lie/abslog",title:"abslog",children:"abslog"})," is used to abstract out logging. Please see ",(0,s.jsx)(n.a,{href:"https://github.com/trygve-lie/abslog",title:"abslog",children:"abslog"})," for\nfurther details."]}),"\n",(0,s.jsx)(n.h5,{id:"development",children:"development"}),"\n",(0,s.jsx)(n.p,{children:"Turns development mode on or off. See the section about development mode."}),"\n",(0,s.jsx)(n.h2,{id:"podlet-instance",children:"Podlet Instance"}),"\n",(0,s.jsx)(n.p,{children:"The podlet instance has the following API:"}),"\n",(0,s.jsx)(n.h3,{id:"middleware",children:".middleware()"}),"\n",(0,s.jsxs)(n.p,{children:["A Connect/Express compatible middleware function which takes care of the\nmultiple operations needed for a podlet to operate correctly. This function is\nmore or less a wrapper for the ",(0,s.jsx)(n.code,{children:".process()"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important:"})," This middleware must be mounted before defining any routes."]}),"\n",(0,s.jsx)(a.Z,{groupId:"server-frameworks",children:(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\napp.use(podlet.middleware());\n"})})})}),"\n",(0,s.jsxs)(n.p,{children:["The middleware will create an ",(0,s.jsx)(n.a,{href:"/docs/api/incoming",children:(0,s.jsx)(n.code,{children:"HttpIncoming"})})," object and store it\nat ",(0,s.jsx)(n.code,{children:"res.locals.podium"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Returns an Array of internal middleware that performs the tasks described above."}),"\n",(0,s.jsx)(n.h3,{id:"manifestoptions",children:".manifest(options)"}),"\n",(0,s.jsxs)(n.p,{children:["This method returns the value of the ",(0,s.jsx)(n.code,{children:"manifest"})," argument that has been set in\nthe constructor."]}),"\n",(0,s.jsxs)(n.p,{children:["Set the manifest using the default pathname which is ",(0,s.jsx)(n.code,{children:"/manifest.json"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.get(podlet.manifest(), (req, res, next) => {\n    res.status(200).json(podlet);\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.manifest(),\n    handler: (request, h) => JSON.stringify(podlet),\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get(podlet.manifest(), async (request, reply) => {\n    reply.send(podlet);\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Set the manifest to ",(0,s.jsx)(n.code,{children:"/component.json"})," using the ",(0,s.jsx)(n.code,{children:"manifest"})," argument on the\nconstructor:"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    manifest: '/component.json',\n});\n\napp.get(podlet.manifest(), (req, res, next) => {\n    res.status(200).json(podlet);\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    manifest: '/component.json',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.manifest(),\n    handler: (request, h) => JSON.stringify(podlet),\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    manifest: '/component.json',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get(podlet.manifest(), async (request, reply) => {\n    reply.send(podlet);\n});\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Podium expects the podlet's manifest route to return a JSON document describing\nthe podlet. This can be achieved by simply serializing the podlet instance."}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet([ ... ]);\n\napp.get(podlet.manifest(), (req, res, next) => {\n    res.status(200).json(podlet);\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet([ ... ]);\n\napp.route({\n    method: 'GET',\n    path: podlet.manifest(),\n    handler: (request, h) => JSON.stringify(podlet),\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet([ ... ]);\n\napp.get(podlet.manifest(), async (request, reply) => {\n    reply.send(podlet);\n});\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"The route will then respond with something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "myPodlet",\n    "version": "1.0.0",\n    "content": "/",\n    "fallback": "/fallback",\n    "css": [],\n    "js": [],\n    "proxy": {}\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"options-1",children:"options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"option"}),(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"default"}),(0,s.jsx)(n.th,{children:"required"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"prefix"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsx)(n.h5,{id:"prefix",children:"prefix"}),"\n",(0,s.jsxs)(n.p,{children:["Sets whether the method should prefix the return value with the value for\n",(0,s.jsx)(n.code,{children:"pathname"})," that was set in the constructor."]}),"\n",(0,s.jsxs)(n.p,{children:["Return the full pathname to the manifest (",(0,s.jsx)(n.code,{children:"/foo/component.json"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    manifest: '/component.json',\n});\n\npodlet.manifest({ prefix: true });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contentoptions",children:".content(options)"}),"\n",(0,s.jsxs)(n.p,{children:["This method returns the value of the ",(0,s.jsx)(n.code,{children:"content"})," argument set in the constructor."]}),"\n",(0,s.jsxs)(n.p,{children:["Set the content using the default pathname (",(0,s.jsx)(n.code,{children:"/"}),"):"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.get(podlet.content(), (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.content(),\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get(podlet.content(), async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Set the content path to ",(0,s.jsx)(n.code,{children:"/index.html"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/index.html',\n});\n\napp.get(podlet.content(), (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/index.html',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.content(),\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/index.html',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get(podlet.content(), async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Set the content path to ",(0,s.jsx)(n.code,{children:"/content"})," and define multiple sub-routes each taking different\nURI parameters:"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/content',\n});\n\napp.get('/content', (req, res) => { ... });\napp.get('/content/info', (req, res) => { ... });\napp.get('/content/info/:id', (req, res) => { ... });\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/content',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: '/content',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: '/content/info',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: '/content/info/{id}',\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/content',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get('/content', async (request, reply) => { ... });\napp.get('/content/info', async (request, reply) => { ... });\napp.get('/content/info/:id', async (request, reply) => { ... });\n"})})})]}),"\n",(0,s.jsx)(n.h4,{id:"options-2",children:"options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"option"}),(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"default"}),(0,s.jsx)(n.th,{children:"required"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"prefix"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsx)(n.h5,{id:"prefix-1",children:"prefix"}),"\n",(0,s.jsxs)(n.p,{children:["Specifies whether the method should prefix the return value with the ",(0,s.jsx)(n.code,{children:"pathname"})," value\nthat was set in the constructor."]}),"\n",(0,s.jsxs)(n.p,{children:["Return the full pathname to the content (",(0,s.jsx)(n.code,{children:"/foo/index.html"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    content: '/index.html',\n});\n\npodlet.content({ prefix: true });\n"})}),"\n",(0,s.jsx)(n.p,{children:"The prefix will be ignored if the returned value is an absolute URL."}),"\n",(0,s.jsx)(n.h3,{id:"fallbackoptions",children:".fallback(options)"}),"\n",(0,s.jsxs)(n.p,{children:["This method returns the value of the ",(0,s.jsx)(n.code,{children:"fallback"})," argument set in the constructor."]}),"\n",(0,s.jsxs)(n.p,{children:["Set the fallback to ",(0,s.jsx)(n.code,{children:"/fallback.html"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    fallback: '/fallback.html',\n});\n\napp.get(podlet.fallback(), (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    fallback: '/fallback.html',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.fallback(),\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    fallback: '/fallback.html',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.get(podlet.fallback(), async (request, reply) => {\n    [ ... ]\n});\n"})})})]}),"\n",(0,s.jsx)(n.h4,{id:"options-3",children:"options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"option"}),(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"default"}),(0,s.jsx)(n.th,{children:"required"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"prefix"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsx)(n.h5,{id:"prefix-2",children:"prefix"}),"\n",(0,s.jsxs)(n.p,{children:["Specifies whether the fallback method should prefix the return value with the\nvalue for ",(0,s.jsx)(n.code,{children:"pathname"})," set in the constructor."]}),"\n",(0,s.jsxs)(n.p,{children:["Return the full pathname to the fallback (",(0,s.jsx)(n.code,{children:"/foo/fallback.html"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/foo',\n    fallback: '/fallback.html',\n});\n\npodlet.fallback({ prefix: true });\n"})}),"\n",(0,s.jsx)(n.p,{children:"The prefix will be ignored if the returned value is an absolute URL."}),"\n",(0,s.jsx)(n.h3,{id:"jsoptionsoptions",children:".js(options|[options])"}),"\n",(0,s.jsx)(n.p,{children:"Set relative or absolute URLs to JavaScript assets for the podlet."}),"\n",(0,s.jsx)(n.p,{children:"When set the values will be internally kept and made available for the document\ntemplate to include. The assets set are also made available in the manifest for\nthe layout to consume."}),"\n",(0,s.jsx)(n.p,{children:"This method can be called multiple times with a single options object to set\nmultiple assets or one can provide an array of options objects to set multiple\nassets."}),"\n",(0,s.jsx)(n.h4,{id:"options-4",children:"options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"option"}),(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"default"}),(0,s.jsx)(n.th,{children:"required"}),(0,s.jsx)(n.th,{children:"details"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"value"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Relative or absolute URL to the JavaScript asset"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"prefix"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Whether the pathname defined on the constructor should be prepend, if relative, to the value"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"type"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"default"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"What type of JavaScript (eg. esm, default, cjs)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"referrerpolicy"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<script>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"crossorigin"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<script>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"integrity"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<script>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"nomodule"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<script>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"async"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<script>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"defer"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<script>"})," element"]})]})]})]}),"\n",(0,s.jsx)(n.h5,{id:"value",children:"value"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"pathname"})," for the podlet's JavaScript assets. This value can be a URL\nat which the podlet's user facing JavaScript is served. The value can be either\nthe ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname",title:"pathname",children:"pathname"})," of a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL",title:"URL",children:"URL"})," or an absolute URL."]}),"\n",(0,s.jsxs)(n.p,{children:["Serve a javascript file at ",(0,s.jsx)(n.code,{children:"/assets/main.js"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.get('/assets.js', (req, res) => {\n    res.status(200).sendFile('./src/js/main.js', err => {});\n});\n\npodlet.js({ value: '/assets.js' });\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.register(require('@hapi/inert'));\n\napp.route({\n    method: 'GET',\n    path: '/assets.js',\n    handler: (request, h) => {\n        return h.file('./src/js/main.js');\n    },\n});\n\npodlet.js({ value: '/assets.js' });\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.register(require('fastify-static'), {\n    root: './src/js/',\n});\n\napp.get('/assets.js', (request, reply) => {\n    reply.sendFile('main.js');\n});\n\npodlet.js({ value: '/assets.js' });\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Serve assets statically along side the app and set a relative URI to the\nJavaScript file:"}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.use('/assets', express.static('./src/js'));\n\npodlet.js([\n    { value: '/assets/main.js' },\n    { value: '/assets/extra.js' },\n]);\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server({\n    port: 7000,\n    routes: {\n        files: {\n            relativeTo: './src/js/',\n        },\n    },\n});\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.register(require('@hapi/inert'));\n\napp.route({\n    method: 'GET',\n    path: '/assets/{param*}',\n    handler: {\n        directory: {\n            path: '.',\n            redirectToSlash: true,\n        },\n    },\n});\n\npodlet.js([\n    { value: '/assets/main.js' },\n    { value: '/assets/extra.js' },\n]);\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.register(require('fastify-static'), {\n    root: './src/js/',\n});\n\napp.get('/assets/:file', (request, reply) => {\n    reply.sendFile(request.params.file);\n});\n\npodlet.js([\n    { value: '/assets/main.js' },\n    { value: '/assets/extra.js' },\n]);\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Set an absolute URL to where the javascript file is located:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\npodlet.js({ value: 'http://cdn.mysite.com/assets/js/e7rfg76.js' });\n"})}),"\n",(0,s.jsx)(n.h5,{id:"prefix-3",children:"prefix"}),"\n",(0,s.jsx)(n.p,{children:"Sets whether the method should prepend the value with the pathname value that\nwas set in the constructor."}),"\n",(0,s.jsx)(n.p,{children:"The prefix will be ignored if value is an absolute URL."}),"\n",(0,s.jsx)(n.h5,{id:"type",children:"type"}),"\n",(0,s.jsxs)(n.p,{children:["Set the type of script which is set. If not set, ",(0,s.jsx)(n.code,{children:"default"})," will be used."]}),"\n",(0,s.jsx)(n.p,{children:"Use one of the following values:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"esm"})," for ECMAScript modules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cjs"})," for CommonJS modules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"amd"})," for AMD modules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"umd"})," for Universal Module Definition"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"})," if the type is unknown."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The type is a hint for further use of the script. This is normally used by the\ndocument template to print correct ",(0,s.jsx)(n.code,{children:"<script>"})," tag or to give a hint to a\nbundler when optimizing JavaScript assets."]}),"\n",(0,s.jsx)(n.h3,{id:"cssoptionsoptions",children:".css(options|[options])"}),"\n",(0,s.jsx)(n.p,{children:"Set relative or absolute URLs to Cascading Style Sheets (CSS) assets for the\npodlet."}),"\n",(0,s.jsx)(n.p,{children:"When set the values will be internally kept and made available for the document\ntemplate to include. The assets set are also made available in the manifest for\nthe layout to consume."}),"\n",(0,s.jsx)(n.p,{children:"The method can be called multiple times with a single options object to set\nmultiple assets or one can provide an array of options objects to set multiple\nassets."}),"\n",(0,s.jsx)(n.h4,{id:"options-5",children:"options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"option"}),(0,s.jsx)(n.th,{children:"type"}),(0,s.jsx)(n.th,{children:"default"}),(0,s.jsx)(n.th,{children:"required"}),(0,s.jsx)(n.th,{children:"details"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"value"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Relative or absolute URL to the CSS asset"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"prefix"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Whether the pathname defined on the constructor should be prepend, if relative, to the value"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"crossorigin"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"disabled"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"hreflang"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"title"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"media"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"type"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"text/css"})}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"rel"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stylesheet"})}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"as"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Correlates to the same attribute on a HTML ",(0,s.jsx)(n.code,{children:"<link>"})," element"]})]})]})]}),"\n",(0,s.jsx)(n.h5,{id:"value-1",children:"value"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"pathname"})," for the CSS assets for the Podlet. The value can be a URL at\nwhich the podlet's user facing CSS is served. The value can be the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname",title:"pathname",children:"pathname"})," of\na ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL",title:"URL",children:"URL"})," or an absolute URL."]}),"\n",(0,s.jsxs)(n.p,{children:["Serve a CSS file at ",(0,s.jsx)(n.code,{children:"/assets/main.css"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.get('/assets.css', (req, res) => {\n    res.status(200).sendFile('./src/css/main.css', err => {});\n});\n\npodlet.css({ value: '/assets.css' });\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server([ ... ]);\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.register(require('@hapi/inert'));\n\napp.route({\n    method: 'GET',\n    path: '/assets.css',\n    handler: (request, h) => {\n        return h.file('./src/css/main.css');\n    },\n});\n\npodlet.css({ value: '/assets.css' });\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.register(require('fastify-static'), {\n    root: './src/css/',\n});\n\napp.get('/assets.css', (request, reply) => {\n    reply.sendFile('main.css');\n});\n\npodlet.css({ value: '/assets.css' });\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Serve assets statically alongside the app and set a relative URI to the css\nfile:"}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.use('/assets', express.static('./src/css'));\n\npodlet.css([\n    { value: '/assets/main.css' },\n    { value: '/assets/extra.css' },\n]);\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server({\n    port: 7000,\n    routes: {\n        files: {\n            relativeTo: './src/css/',\n        },\n    },\n});\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register({\n    plugin: new HapiPodlet(),\n    options: podlet,\n});\n\napp.register(require('@hapi/inert'));\n\napp.route({\n    method: 'GET',\n    path: '/assets/{param*}',\n    handler: {\n        directory: {\n            path: '.',\n            redirectToSlash: true,\n        },\n    },\n});\n\npodlet.css([\n    { value: '/assets/main.css' },\n    { value: '/assets/extra.css' },\n]);\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\napp.register(fastifyPodlet, podlet);\n\napp.register(require('fastify-static'), {\n    root: './src/css/',\n});\n\napp.get('/assets/:file', (request, reply) => {\n    reply.sendFile(request.params.file);\n});\n\npodlet.css([\n    { value: '/assets/main.css' },\n    { value: '/assets/extra.css' },\n]);\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Set an absolute URL to where the CSS file is located:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n});\n\npodlet.css({ value: 'http://cdn.mysite.com/assets/css/3ru39ur.css' });\n"})}),"\n",(0,s.jsx)(n.h5,{id:"prefix-4",children:"prefix"}),"\n",(0,s.jsx)(n.p,{children:"Sets whether the method should prepend the value with the pathname value that\nwas set in the constructor."}),"\n",(0,s.jsx)(n.p,{children:"The prefix will be ignored if value is an absolute URL."}),"\n",(0,s.jsx)(n.h3,{id:"proxy-target-name-",children:(0,s.jsx)(n.code,{children:".proxy({ target, name })"})}),"\n",(0,s.jsxs)(n.p,{children:["Method for defining proxy targets to be mounted in a layout server. For a\ndetailed overview of how proxying works, please see the\n",(0,s.jsx)(n.a,{href:"/docs/podlet/proxying",children:"proxying guide"})," for further details."]}),"\n",(0,s.jsxs)(n.p,{children:["When a podlet is put in development mode (",(0,s.jsx)(n.code,{children:"development"})," is set to ",(0,s.jsx)(n.code,{children:"true"})," in the constructor) these proxy endpoints will also be mounted in the podlet for ease of development and you will then have the same proxy endpoints available in development as you do when working with a layout."]}),"\n",(0,s.jsx)(n.p,{children:"Proxying is intended to be used as a way to make podlet endpoints publicly available. A\ncommon use case for this is creating endpoints for client side code to interact\nwith (ajax requests from the browser). One might also make use of proxying to\npass form submissions from the browser back to the podlet."}),"\n",(0,s.jsxs)(n.p,{children:["This method returns the value of the ",(0,s.jsx)(n.code,{children:"target"})," argument and internally keeps\ntrack of the value of ",(0,s.jsx)(n.code,{children:"target"})," for use when the podlet instance is serialized\ninto a manifest JSON string."]}),"\n",(0,s.jsxs)(n.p,{children:["In a podlet it is possible to define up to 4 proxy targets and each target can\nbe the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname",title:"pathname",children:"pathname"})," part of a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL",title:"URL",children:"URL"})," or an absolute URL."]}),"\n",(0,s.jsx)(n.p,{children:"For each podlet, each proxy target must have a unique name."}),"\n",(0,s.jsxs)(n.p,{children:["Mounts one proxy target ",(0,s.jsx)(n.code,{children:"/api"})," with the name ",(0,s.jsx)(n.code,{children:"api"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet( ... );\napp.get(podlet.proxy({ target: '/api', name: 'api' }), (req, res) => { ... });\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server( ... );\nconst podlet = new Podlet( ... );\napp.route({\n    method: 'GET',\n    path: podlet.proxy({ target: '/api', name: 'api' }),\n    handler: (request, h) => { ... },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet( ... );\napp.get(podlet.proxy({ target: '/api', name: 'api' }), async (request, reply) => {\n    ...\n});\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Defines multiple endpoints on one proxy target ",(0,s.jsx)(n.code,{children:"/api"})," with the name ",(0,s.jsx)(n.code,{children:"api"}),":"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = express();\nconst podlet = new Podlet( ... );\n\napp.get('/api', (req, res) => { ... });\napp.get('/api/foo', (req, res) => { ... });\napp.post('/api/foo', (req, res) => { ... });\napp.get('/api/bar/:id', (req, res) => { ... });\n\npodlet.proxy({ target: '/api', name: 'api' });\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = Hapi.Server( ... );\nconst podlet = new Podlet( ... );\n\napp.route({\n    method: 'GET',\n    path: '/api',\n    handler: (request, h) => { ... },\n});\n\napp.route({\n    method: 'GET',\n    path: '/api/foo',\n    handler: (request, h) => { ... },\n});\n\napp.route({\n    method: 'POST',\n    path: '/api/foo',\n    handler: (request, h) => { ... },\n});\n\napp.route({\n    method: 'GET',\n    path: '/api/bar/{id}',\n    handler: (request, h) => { ... },\n});\n\npodlet.proxy({ target: '/api', name: 'api' });\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const app = fastify();\nconst podlet = new Podlet( ... );\n\napp.get('/api', async (request, reply) => { ... });\napp.get('/api/foo', async (request, reply) => { ... });\napp.post('/api/foo', async (request, reply) => { ... });\napp.get('/api/foo/:id', async (request, reply) => { ... });\n\npodlet.proxy({ target: '/api', name: 'api' });\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Sets a remote target by defining an absolute URL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"podlet.proxy({ target: 'http://remote.site.com/api/', name: 'remoteApi' });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defaultscontext",children:".defaults(context)"}),"\n",(0,s.jsx)(n.p,{children:"Alters the default context set when in development mode."}),"\n",(0,s.jsx)(n.p,{children:"By default this context has the following shape:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"{\n    debug: 'false',\n    locale: 'en-EN',\n    deviceType: 'desktop',\n    requestedBy: 'the_name_of_the_podlet',\n    mountOrigin: 'http://localhost:port',\n    mountPathname: '/same/as/manifest/method',\n    publicPathname: '/same/as/manifest/method',\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The default development mode context can be overridden by passing an object with\nthe desired key / values to override."}),"\n",(0,s.jsxs)(n.p,{children:["Example of overriding ",(0,s.jsx)(n.code,{children:"deviceType"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'foo',\n    version: '1.0.0',\n});\n\npodlet.defaults({\n    deviceType: 'mobile',\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Additional values not defined by Podium can also be appended to the default\ndevelopment mode context in the same way."}),"\n",(0,s.jsx)(n.p,{children:"Example of adding a context value:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'foo',\n    version: '1.0.0',\n});\n\npodlet.defaults({\n    token: '9fc498984f3ewi',\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["N.B. The default development mode context will only be appended to the response\nwhen the constructor option ",(0,s.jsx)(n.code,{children:"development"})," is set to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"pathname-1",children:".pathname()"}),"\n",(0,s.jsxs)(n.p,{children:["A helper method used to retrieve the ",(0,s.jsx)(n.code,{children:"pathname"})," value that was set in the\nconstructor."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    pathname: '/foo',\n});\n\napp.get(podlet.pathname(), (req, res, next) => {\n    [ ... ]\n});\n\napp.get(`${podlet.pathname()}/bar`, (req, res, next) => {\n    [ ... ]\n});\n\napp.get(`${podlet.pathname()}/bar/:id`, (req, res, next) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    pathname: '/foo',\n});\n\napp.route({\n    method: 'GET',\n    path: podlet.pathname(),\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: `${podlet.pathname()}/bar`,\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: `${podlet.pathname()}/bar/{id}`,\n    handler: (request, h) => {\n        [ ... ]\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    pathname: '/foo',\n});\n\napp.get(podlet.pathname(), async (request, reply) => {\n    [ ... ]\n});\n\napp.get(`${podlet.pathname()}/bar`, async (request, reply) => {\n    [ ... ]\n});\n\napp.get(`${podlet.pathname()}/bar/:id`, async (request, reply) => {\n    [ ... ]\n});\n"})})}),(0,s.jsx)(r.Z,{value:"http",label:"HTTP",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    name: 'myPodlet',\n    pathname: '/foo',\n});\n\nconst server = http.createServer(async (req, res) => {\n    let incoming = new HttpIncoming(req, res);\n    incoming = await layout.process(incoming);\n\n    const { pathname } = incoming.url;\n\n    if (pathname === podlet.pathname()) {\n        [ ... ]\n    }\n\n    if (pathname === `${podlet.pathname()}/bar`) {\n        [ ... ]\n    }\n\n    if (pathname.startsWith(`${podlet.pathname()}/bar/`)) {\n        [ ... ]\n    }\n});\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"viewtemplate",children:".view(template)"}),"\n",(0,s.jsx)(n.p,{children:"Sets the default encapsulating HTML document template."}),"\n",(0,s.jsx)(n.p,{children:"Its worth noting that this document template is only applied to Podlets when in\ndevelopment mode. When a Layout requests a Podlet this document template will\nnot be applied."}),"\n",(0,s.jsx)(n.p,{children:"Takes a template function that accepts an instance of HttpIncoming, a content\nstring as well as any additional markup for the document's head section:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"(incoming, body, head) => `Return an HTML string here`;\n"})}),"\n",(0,s.jsx)(n.p,{children:"In practice this might look something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'layout.view((incoming, body, head) => `<!doctype html>\n<html lang="${incoming.context.locale}">\n    <head>\n        <meta charset="${incoming.view.encoding}">\n        <title>${incoming.view.title}</title>\n        ${head}\n    </head>\n    <body>\n        ${body}\n    </body>\n</html>`;\n);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"renderhttpincoming-fragment-args",children:".render(HttpIncoming, fragment, [args])"}),"\n",(0,s.jsxs)(n.p,{children:["Method to render the document template. Will, by default, render the document\ntemplate provided by Podium unless a custom document template is set using the\n",(0,s.jsx)(n.code,{children:".view"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["In most HTTP frameworks this method can be ignored in favour of\n",(0,s.jsx)(n.code,{children:"res.podiumSend()"}),". If present, ",(0,s.jsx)(n.code,{children:"res.podiumSend()"})," has the advantage that it's not necessary to pass in an ",(0,s.jsx)(n.a,{href:"/docs/api/incoming",children:(0,s.jsx)(n.code,{children:"HttpIncoming"})})," object as the first argument."]}),"\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This method takes the following arguments:"}),"\n",(0,s.jsx)(n.h4,{id:"httpincoming-required",children:"HttpIncoming (required)"}),"\n",(0,s.jsxs)(n.p,{children:["An instance of the ",(0,s.jsx)(n.a,{href:"/docs/api/incoming",children:(0,s.jsx)(n.code,{children:"HttpIncoming"})})," class."]}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get(podlet.content(), (req, res) => {\n    const incoming = res.locals.podium;\n    const document = layout.render(incoming, '<div>content to render</div>');\n    res.send(document);\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.route({\n    method: 'GET',\n    path: podlet.content(),\n    handler: (request, h) => {\n        const incoming = request.app.podium;\n        return layout.render(incoming, '<div>content to render</div>');\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get(podlet.content(), (req, res) => {\n    const incoming = reply.app.podium;\n    const document = layout.render(incoming, '<div>content to render</div>');\n    reply.send(document);\n});\n"})})})]}),"\n",(0,s.jsx)(n.h4,{id:"fragment",children:"fragment"}),"\n",(0,s.jsx)(n.p,{children:"An String that is intended to be a fragment of the final HTML document."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"layout.render(incoming, '<div>content to render</div>');\n"})}),"\n",(0,s.jsx)(n.h4,{id:"args",children:"[args]"}),"\n",(0,s.jsx)(n.p,{children:"All following arguments given to the method will be passed on to the document\ntemplate. For example, this could be used to pass on parts of a page to the\ndocument template."}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"podlet.view = (incoming, body, head) => {\n    return `\n        <html>\n            <head>${head}</head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\napp.get(podlet.content(), async (req, res, next) => {\n    const incoming = res.locals.podium;\n\n    const head = `<meta ..... />`;\n    const body = `<section>my content</section>`;\n\n    const document = layout.render(incoming, body, head);\n    res.send(document);\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"podlet.view = (incoming, body, head) => {\n    return `\n        <html>\n            <head>${head}</head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\napp.route({\n    method: 'GET',\n    path: podlet.content(),\n    handler: (request, h) => {\n        const incoming = request.app.podium;\n\n        const head = `<meta ..... />`;\n        const body = `<section>my content</section>`;\n\n        return layout.render(incoming, body, head);\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"podlet.view = (incoming, body, head) => {\n    return `\n        <html>\n            <head>${head}</head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\napp.get(podlet.content(), (req, res) => {\n    const incoming = reply.app.podium;\n\n    const head = `<meta ..... />`;\n    const body = `<section>my content</section>`;\n\n    const document = layout.render(incoming, body, head);\n    reply.send(document);\n});\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"processhttpincoming",children:".process(HttpIncoming)"}),"\n",(0,s.jsx)(n.p,{children:"Method for processing an incoming HTTP request. This method is intended to be\nused to implement support for multiple HTTP frameworks and in most cases will\nnot need to be used directly by podlet developers when creating podlet servers."}),"\n",(0,s.jsx)(n.p,{children:"What it does:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handles detection of development mode and sets the appropriate defaults"}),"\n",(0,s.jsxs)(n.li,{children:["Runs context deserializing on the incoming request and sets a context object at ",(0,s.jsx)(n.code,{children:"HttpIncoming.context"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Returns an ",(0,s.jsx)(n.a,{href:"/docs/api/incoming",children:(0,s.jsx)(n.code,{children:"HttpIncoming"})})," object."]}),"\n",(0,s.jsx)(n.p,{children:"This method takes the following arguments:"}),"\n",(0,s.jsx)(n.h4,{id:"httpincoming-required-1",children:"HttpIncoming (required)"}),"\n",(0,s.jsxs)(n.p,{children:["An instance of the ",(0,s.jsx)(n.a,{href:"/docs/api/incoming",children:(0,s.jsx)(n.code,{children:"HttpIncoming"})})," class."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { HttpIncoming } = require('@podium/utils');\nconst Podlet = require('@podium/podlet');\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: podlet.content(),\n});\n\napp.use(async (req, res, next) => {\n    const incoming = new HttpIncoming(req, res, res.locals);\n    try {\n        await podlet.process(incoming);\n        if (!incoming.proxy) {\n            res.locals.podium = result;\n            next();\n        }\n    } catch (error) {\n        next(error);\n    }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"respodiumsendfragment",children:"res.podiumSend(fragment)"}),"\n",(0,s.jsxs)(n.p,{children:["Method for dispatching an HTML fragment. Calls the ",(0,s.jsx)(n.code,{children:".send()"})," / ",(0,s.jsx)(n.code,{children:".write()"})," methods\nin the framework that's being used and serves the HTML fragment."]}),"\n",(0,s.jsxs)(n.p,{children:["When in development mode, when the constructor option ",(0,s.jsx)(n.code,{children:"development"})," is set to\n",(0,s.jsx)(n.code,{children:"true"}),", this method will wrap the provided fragment in the given document\ntemplate before dispatching. When not in development mode, this method will just\ndispatch the fragment."]}),"\n",(0,s.jsx)(n.p,{children:"Example of sending an HTML fragment:"}),"\n",(0,s.jsxs)(a.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(r.Z,{value:"express",label:"Express",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get(podlet.content(), (req, res) => {\n    res.podiumSend('<h1>Hello World</h1>');\n});\n"})})}),(0,s.jsx)(r.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.route({\n    method: 'GET',\n    path: podlet.content(),\n    handler: (request, h) => {\n        return h.podiumSend('<h2>Hello world</h2>');\n    },\n});\n"})})}),(0,s.jsx)(r.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"app.get(podlet.content(), (request, reply) => {\n    reply.podiumSend('<h2>Hello world</h2>');\n});\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"development-mode",children:"Development mode"}),"\n",(0,s.jsxs)(n.p,{children:["In most cases podlets are fragments of a whole HTML document. When a layout\nserver is requesting a podlet's content or fallback, the podlet should serve\njust that fragment and not a whole HTML document with its ",(0,s.jsx)(n.code,{children:"<html>"}),", ",(0,s.jsx)(n.code,{children:"<head>"}),"\nand ",(0,s.jsx)(n.code,{children:"<body>"}),". Additionally, when a layout server requests a podlet it provides a Podium context to the podlet."]}),"\n",(0,s.jsx)(n.p,{children:"These things can prove challenging for local development since accessing a\npodlet directly, from a web browser, in local development will render the\npodlet without either an encapsulating HTML document or a Podium context that\nthe podlet might need to function properly."}),"\n",(0,s.jsxs)(n.p,{children:["To solve this it is possible to switch a podlet to development mode by setting\nthe ",(0,s.jsx)(n.code,{children:"development"})," argument in the constructor to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When in development mode a default context on the HTTP response will be set and\nan encapsulating HTML document will be provided (so long as ",(0,s.jsx)(n.code,{children:"res.podiumSend()"}),"\nis used) when dispatching the content or fallback."]}),"\n",(0,s.jsxs)(n.p,{children:["The default HTML document for encapsulating a fragment will reference the\nvalues set on ",(0,s.jsx)(n.code,{children:".css()"})," and ",(0,s.jsx)(n.code,{children:".js()"})," and use ",(0,s.jsx)(n.code,{children:"locale"})," from the default context to\nset language on the document."]}),"\n",(0,s.jsxs)(n.p,{children:["The default context in development mode can be altered by the ",(0,s.jsx)(n.code,{children:".defaults()"}),"\nmethod of the podlet instance."]}),"\n",(0,s.jsxs)(n.p,{children:["The default encapsulating HTML document used in development mode can be replaced\nby the ",(0,s.jsx)(n.code,{children:".view()"})," method of the podlet instance."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Note:"})," Only turn on development mode during local development, ensure it is\nturned off when in production."]}),"\n",(0,s.jsx)(n.p,{children:"Example of turning on development mode only in local development:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    development: process.env.NODE_ENV !== 'production';\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"When a layout server sends a request to a podlet in development mode, the\ndefault context will be overridden by the context from the layout server and\nthe encapsulating HTML document will not be applied."})]})}function u(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>r});t(7294);var s=t(6010);const l={tabItem:"tabItem_Ymn6"};var a=t(5893);function r(e){let{children:n,hidden:t,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.Z)(l.tabItem,r),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var s=t(7294),l=t(6010),a=t(2466),r=t(6550),o=t(469),d=t(1980),i=t(7392),c=t(12);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:l}}=e;return{value:n,label:t,attributes:s,default:l}}))}(t);return function(e){const n=(0,i.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const l=(0,r.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d._X)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(l.location.search);n.set(a,e),l.replace({...l.location,search:n.toString()})}),[a,l])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:l}=e,a=h(e),[r,d]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[i,p]=m({queryString:t,groupId:l}),[x,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[l,a]=(0,c.Nk)(t);return[l,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:l}),f=(()=>{const e=i??x;return u({value:e,tabValues:a})?e:null})();(0,o.Z)((()=>{f&&d(f)}),[f]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),p(e),j(e)}),[p,j,a]),tabValues:a}}var j=t(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(5893);function v(e){let{className:n,block:t,selectedValue:s,selectValue:r,tabValues:o}=e;const d=[],{blockElementScrollPositionUntilNextRender:i}=(0,a.o5)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),l=o[t].value;l!==s&&(i(n),r(l))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>d.push(e),onKeyDown:p,onClick:c,...a,className:(0,l.Z)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:l}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function b(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,l.Z)("tabs-container",f.tabList),children:[(0,g.jsx)(v,{...e,...n}),(0,g.jsx)(y,{...e,...n})]})}function w(e){const n=(0,j.Z)();return(0,g.jsx)(b,{...e,children:p(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var s=t(7294);const l={},a=s.createContext(l);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);