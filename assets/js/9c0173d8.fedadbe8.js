"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4981],{7749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>r});var s=n(5893),i=n(1151);const o={id:"getting_started",title:"Getting Started"},d=void 0,l={id:"podlet/getting_started",title:"Getting Started",description:"This guide will show you how to get started building podlets for Podium in Node",source:"@site/docs/podlet/getting_started.md",sourceDirName:"podlet",slug:"/podlet/getting_started",permalink:"/docs/podlet/getting_started",draft:!1,unlisted:!1,editUrl:"https://github.com/podium-lib/podium-lib.github.io/tree/main/website/docs/docs/podlet/getting_started.md",tags:[],version:"current",frontMatter:{id:"getting_started",title:"Getting Started"},sidebar:"sidebar",previous:{title:"Conceptual Overview",permalink:"/docs/podium/conceptual_overview"},next:{title:"Fallbacks",permalink:"/docs/podlet/fallbacks"}},a={},r=[{value:"Before you begin",id:"before-you-begin",level:2},{value:"Step 1: Project setup",id:"step-1-project-setup",level:2},{value:"Step 2: Install dependencies",id:"step-2-install-dependencies",level:2},{value:"Step 3: Import dependencies",id:"step-3-import-dependencies",level:2},{value:"Step 4: Instantiate instances",id:"step-4-instantiate-instances",level:2},{value:"Step 5: Mount middleware",id:"step-5-mount-middleware",level:2},{value:"Step 6: Create a content route",id:"step-6-create-a-content-route",level:2},{value:"Step 7: Create a manifest route",id:"step-7-create-a-manifest-route",level:2},{value:"Step 8: Start the server",id:"step-8-start-the-server",level:2},{value:"The complete code",id:"the-complete-code",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"This guide will show you how to get started building podlets for Podium in Node\njs using the Express js HTTP framework. It will walk you through the creation of\na very simple bare bones podlet."}),"\n",(0,s.jsx)(t.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,s.jsx)(t.p,{children:"Ideally, you should have some familiarity with building apps with JavaScript and\nNode.js. You will also need to have Node.js installed at version 8 or higher.\nThe npm cli will be installed automatically when you install\nNode.js"}),"\n",(0,s.jsx)(t.h2,{id:"step-1-project-setup",children:"Step 1: Project setup"}),"\n",(0,s.jsx)(t.p,{children:"First, we need to initialize a new Node project in an empty directory."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mkdir basic-podlet\ncd basic-podlet\nnpm init\n"})}),"\n",(0,s.jsx)(t.p,{children:"Follow the prompts (mostly accepting defaults) to complete project\ninitialization."}),"\n",(0,s.jsx)(t.h2,{id:"step-2-install-dependencies",children:"Step 2: Install dependencies"}),"\n",(0,s.jsx)(t.p,{children:"Next, we need to install and import dependencies. Express js and @podium/podlet.\nTo do so, run:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install express @podium/podlet\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-3-import-dependencies",children:"Step 3: Import dependencies"}),"\n",(0,s.jsxs)(t.p,{children:["Create a file ",(0,s.jsx)(t.code,{children:"index.js"})," and import the 2 dependencies at the top"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import express from 'express';\nimport Podlet from '@podium/podlet';\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-4-instantiate-instances",children:"Step 4: Instantiate instances"}),"\n",(0,s.jsx)(t.p,{children:"Create an Express app instance and instantiate the podlet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const app = express();\n\nconst podlet = new Podlet({\n    name: 'myPodlet', // required\n    version: '1.0.0', // required\n    pathname: '/', // required\n    manifest: '/manifest.json', // optional, defaults to '/manifest.json'\n    content: '/', // optional, defaults to '/'\n    development: true, // optional, defaults to false\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["It's not necessary to set ",(0,s.jsx)(t.code,{children:"content"})," or ",(0,s.jsx)(t.code,{children:"manifest"})," as we have done above. These values default to appropriate values that you will use most of the time."]}),"\n",(0,s.jsxs)(t.p,{children:["While we have set ",(0,s.jsx)(t.code,{children:"development"})," to ",(0,s.jsx)(t.code,{children:"true"}),", you should remember to set this to ",(0,s.jsx)(t.code,{children:"false"})," when going into production. Development mode is only useful when working on a podlet in isolation."]}),"\n",(0,s.jsx)(t.h2,{id:"step-5-mount-middleware",children:"Step 5: Mount middleware"}),"\n",(0,s.jsxs)(t.p,{children:["Mount the podlet instances ",(0,s.jsx)(t.a,{href:"https://medium.com/@agoiabeladeyemi/a-simple-explanation-of-express-middleware-c68ea839f498",children:"middleware"})," into the Express app"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"app.use(podlet.middleware());\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-6-create-a-content-route",children:"Step 6: Create a content route"}),"\n",(0,s.jsx)(t.p,{children:"This is the route that the podlet server will use to return its HTML content."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"app.get(podlet.content(), (req, res) => {\n    res.status(200).podiumSend(`\n        <div>\n            This is the podlet's HTML content\n        </div>\n    `);\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here we use the podlets helper method ",(0,s.jsx)(t.code,{children:"podlet.content()"})," which returns the content path we set in step 4."]}),"\n",(0,s.jsx)(t.h2,{id:"step-7-create-a-manifest-route",children:"Step 7: Create a manifest route"}),"\n",(0,s.jsxs)(t.p,{children:["In Podium, each podlet must return meta data about itself in the form of a JSON document. By returning the podlet object, it will be serialized with ",(0,s.jsx)(t.code,{children:"JSON.stringify(podlet)"})," and\nreturned to the router."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"app.get(podlet.manifest(), (req, res) => {\n    res.status(200).send(podlet);\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Same as with the content route, we can use the podlet's helper method ",(0,s.jsx)(t.code,{children:"podlet.manifest()"})," to return the default manifest route, which is ",(0,s.jsx)(t.code,{children:"'/manifest.json'"})]}),"\n",(0,s.jsx)(t.h2,{id:"step-8-start-the-server",children:"Step 8: Start the server"}),"\n",(0,s.jsx)(t.p,{children:"Now, all thats left is to start the server and test it out"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"app.listen(7100);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We call ",(0,s.jsx)(t.code,{children:".listen(port)"})," on the Express app instance and pass it a port"]}),"\n",(0,s.jsx)(t.p,{children:"We can run the app with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"node index.js\n"})}),"\n",(0,s.jsx)(t.p,{children:"And we can then CURL the server to get back it's manifest content:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'curl http://localhost:7100/manifest.json\n# {"name":"myPodlet","version":"1.0.0","content":"/","fallback":"/fallback","assets":{"js":"","css":""},"proxy":{}}\n'})}),"\n",(0,s.jsx)(t.p,{children:"And CURL the server to get back it's HTML content:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"curl http://localhost:7100\n# <div>This is the podlet's HTML content</div>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"the-complete-code",children:"The complete code"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import express from 'express';\nimport Podlet from '@podium/podlet';\n\nconst app = express();\n\nconst podlet = new Podlet({\n    name: 'myPodlet',\n    version: '1.0.0',\n    pathname: '/',\n    content: '/',\n    fallback: '/fallback',\n    development: true,\n});\n\napp.use(podlet.middleware());\n\napp.get(podlet.content(), (req, res) => {\n    res.status(200).podiumSend(`\n        <div>\n            This is the podlet's HTML content\n        </div>\n    `);\n});\n\napp.get(podlet.manifest(), (req, res) => {\n    res.status(200).send(podlet);\n});\n\napp.listen(7100);\n"})})]})}function c(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>d});var s=n(7294);const i={},o=s.createContext(i);function d(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);