"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9002],{5497:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var s=n(5893),o=n(1151),r=n(4866),i=n(5162);const a={id:"incoming",title:"HttpIncoming"},l=void 0,c={id:"api/incoming",title:"HttpIncoming",description:"In the request/response life cycle of an HTTP request handled by Podium,",source:"@site/docs/api/incoming.md",sourceDirName:"api",slug:"/api/incoming",permalink:"/docs/api/incoming",draft:!1,unlisted:!1,editUrl:"https://github.com/podium-lib/podium-lib.github.io/tree/main/website/docs/docs/api/incoming.md",tags:[],version:"current",frontMatter:{id:"incoming",title:"HttpIncoming"},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/docs/api/getting_started"},next:{title:"Assets",permalink:"/docs/api/assets"}},d={},h=[{value:"Constructor",id:"constructor",level:2},{value:"options",id:"options",level:4},{value:"request",id:"request",level:5},{value:"response",id:"response",level:5},{value:"params",id:"params",level:5},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:".toJSON()",id:"tojson",level:3}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["In the request/response life cycle of an HTTP request handled by Podium,\ndifferent information needs to be accessible at different stages. To cater to\nthis, Podium has an ",(0,s.jsx)(t.code,{children:"HttpIncoming"})," object which is passed between the different\nparts of Podium throughout the request/response life cycle."]}),"\n",(0,s.jsxs)(t.p,{children:["This ",(0,s.jsx)(t.code,{children:"HttpIncoming"})," object holds different values during the various stages in a\nrequest/response life cycle. The most important values are:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The Podium context"}),"\n",(0,s.jsx)(t.li,{children:"View properties for use by the document template"}),"\n",(0,s.jsx)(t.li,{children:"A URL object for the servers request object (holds query params etc)"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"HttpIncoming"})," is used in both ",(0,s.jsx)(t.a,{href:"/docs/api/layout",children:"@podium/layout"})," and\n",(0,s.jsx)(t.a,{href:"/docs/api/podlet",children:"@podium/podlet"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"HttpIncoming"})," class is located in the ",(0,s.jsx)(t.a,{href:"https://github.com/podium-lib/utils/blob/master/lib/http-incoming.js",children:"@podium/utils"}),"\nmodule and when writing an HTTP server without using the supported HTTP\nframework plugins, it will be necessary to instantiate an instance of this\nobject and pass it between the different parts of Podium."]}),"\n",(0,s.jsxs)(t.p,{children:["When using the supported HTTP framework plugins an instance of ",(0,s.jsx)(t.code,{children:"HttpIncoming"})," is\ncreated for you under the hood and passed on as a property on the request\nbetween the different parts of the request/response life cycle of the HTTP\nframework."]}),"\n",(0,s.jsxs)(r.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(i.Z,{value:"express",label:"Express",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const express = require('express');\nconst Layout = require('@podium/layout');\n\nconst app = express();\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Set up a document template which take HttpIncoming and a body content.\n// This template will be used when .render() is called in a request.\nlayout.view = (incoming, body) => {\n    return `\n        <html>\n            <head><title>${incoming.view.title}</title></head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\n// Attach the middleware on Express. This will create HttpIncoming under the\n// hood plus generate the context and store it on HttpIncoming among other\n// things. HttpIncoming will be stored at res.locals.podium\napp.use(layout.middleware());\n\napp.get(layout.pathname(), (req, res) => {\n    // Get the HttpIncoming object generated by the layout.middleware()\n    let incoming = res.locals.podium;\n\n    // Set a view property on HttpIncoming. This can now be used in the\n    // document template or anywhere one have access to HttpIncoming.\n    incoming.view = {\n        title: 'My pretty site'\n    };\n\n    // Pass HttpIncoming on to the fetch method. This will pass the generated\n    // context on to the request to the podlet.\n    const { content } = await podlet.fetch(incoming);\n\n    // Call podiumSend with the content of the podlet. This will now call the\n    // document template set on the layout.view property send the response.\n    // This will pass on HttpIncoming to the document template under the hood.\n    res.podiumSend(content);\n});\n\napp.listen(7000);\n"})})}),(0,s.jsx)(i.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const HapiLayout = require('@podium/hapi-layout');\nconst Layout = require('@podium/layout');\nconst Hapi = require('hapi');\n\nconst app = Hapi.Server({\n    host: 'localhost',\n    port: 7000,\n});\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Set up a document template which take HttpIncoming and a body content.\n// This template will be used when .render() is called in a request.\nlayout.view = (incoming, body) => {\n    return `\n        <html>\n            <head><title>${incoming.view.title}</title></head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\napp.register({\n    plugin: new HapiLayout(),\n    options: layout,\n});\n\napp.route({\n    method: 'GET',\n    path: layout.pathname(),\n    handler: (request, h) => {\n        // Get the HttpIncoming object generated by the pre-hook in the plugin\n        let incoming = request.app.podium;\n\n        // Set a view property on HttpIncoming. This can now be used in the\n        // document template or anywhere one have access to HttpIncoming.\n        incoming.view = {\n            title: 'My pretty site'\n        };\n\n        // Pass HttpIncoming on to the fetch method. This will pass the\n        // generated context on to the request to the podlet.\n        const { content } = await podlet.fetch(incoming);\n\n        // Call podiumSend with the content of the podlet. This will now call\n        // the document template set on the layout.view property send the\n        // response. This will pass on HttpIncoming to the document template\n        // under the hood.\n        return h.podiumSend(content);\n    },\n});\n\napp.start();\n"})})}),(0,s.jsx)(i.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const FastifyLayout = require('@podium/fastify-layout');\nconst fastify = require('fastify');\nconst Layout = require('@podium/layout');\n\nconst app = fastify({ logger: true });\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Set up a document template which take HttpIncoming and a body content.\n// This template will be used when .render() is called in a request.\nlayout.view = (incoming, body) => {\n    return `\n        <html>\n            <head><title>${incoming.view.title}</title></head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\napp.register(FastifyLayout, layout);\n\napp.get(layout.pathname(), async (request, reply) => {\n    // Get the HttpIncoming object generated by the pre-hook in the plugin\n    const incoming = reply.app.podium;\n\n    // Set a view property on HttpIncoming. This can now be used in the\n    // document template or anywhere one have access to HttpIncoming.\n    incoming.view = {\n        title: 'My pretty site'\n    };\n\n    // Pass HttpIncoming on to the fetch method. This will pass the\n    // generated context on to the request to the podlet.\n    const { content } = await podlet.fetch(incoming);\n\n    // Call podiumSend with the content of the podlet. This will now call\n    // the document template set on the layout.view property send the\n    // response. This will pass on HttpIncoming to the document template\n    // under the hood.\n    reply.podiumSend(content);\n});\n\nconst start = async () => {\n    try {\n        await app.listen(7000);\n        app.log.info(`server listening on ${app.server.address().port}`);\n    } catch (err) {\n        app.log.error(err);\n        process.exit(1);\n    }\n}\nstart();\n"})})}),(0,s.jsx)(i.Z,{value:"http",label:"HTTP",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const { HttpIncoming } = require('@podium/utils');\nconst Layout = require('@podium/layout');\nconst http = require('http');\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Set up a document template which take HttpIncoming and a body content.\n// This template will be used when .render() is called in a request.\nlayout.view = (incoming, body) => {\n    return `\n        <html>\n            <head><title>${incoming.view.title}</title></head>\n            <body>${body}</body>\n        </html>\n    `;\n};\n\nconst server = http.createServer(async (req, res) => {\n    // Create a HttpIncoming object\n    let incoming = new HttpIncoming(req, res);\n\n    // Set a view property on HttpIncoming. This can now be used in the\n    // document template or anywhere one have access to HttpIncoming.\n    incoming.view = {\n        title: 'My pretty site',\n    };\n\n    // Pass HttpIncoming on to the layout processor. This will generate\n    // the context and store it on HttpIncoming among other things\n    incoming = await layout.process(incoming);\n\n    // Pass HttpIncoming on to the fetch method. This will pass the generated\n    // context on to the request to the podlet.\n    const { content } = await podlet.fetch(incoming);\n\n    // Pass HttpIncoming and the content of the podlet to the render method.\n    // This will now call the document template set on the layout.view property.\n    const html = layout.render(incoming, content);\n\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/html');\n    res.end(html);\n});\n\nserver.listen(7000);\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsx)(t.p,{children:"Create a new HttpIncoming instance."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const { HttpIncoming } = require('@podium/utils');\nconst incoming = new HttpIncoming(request, response, params);\n"})}),"\n",(0,s.jsx)(t.h4,{id:"options",children:"options"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"option"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"default"}),(0,s.jsx)(t.th,{children:"required"}),(0,s.jsx)(t.th,{children:"details"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"request"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"http.IncomingMessage"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"null"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"A raw Node.js HTTP request object"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"response"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"http.ServerResponse"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"null"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"A raw Node.js HTTP response object"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"params"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"object"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"{}"})}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"Request scoped parameters"})]})]})]}),"\n",(0,s.jsx)(t.h5,{id:"request",children:"request"}),"\n",(0,s.jsxs)(t.p,{children:["A raw Node.js ",(0,s.jsx)(t.a,{href:"https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_incomingmessage",children:(0,s.jsx)(t.code,{children:"http.IncomingMessage"})}),"\nobject."]}),"\n",(0,s.jsxs)(t.p,{children:['If used with an HTTP framework please note that some frameworks operate with\ntheir own "request" objects as a wrapper around ',(0,s.jsx)(t.code,{children:"http.IncomingMessage"}),". In such\ncases it is often necessary to gain access to the raw ",(0,s.jsx)(t.code,{children:"http.IncomingMessage"}),"\nobject through a property or method."]}),"\n",(0,s.jsx)(t.h5,{id:"response",children:"response"}),"\n",(0,s.jsxs)(t.p,{children:["A raw Node.js ",(0,s.jsx)(t.a,{href:"https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_serverresponse",children:(0,s.jsx)(t.code,{children:"http.ServerResponse"})}),"\nobject."]}),"\n",(0,s.jsxs)(t.p,{children:['If used with an HTTP framework please note that some frameworks operate with\ntheir own "request" objects as a wrapper around ',(0,s.jsx)(t.code,{children:"http.IncomingMessage"}),". In such\ncases it is often necessary to gain access to the raw ",(0,s.jsx)(t.code,{children:"http.IncomingMessage"}),"\nobject through a property or method."]}),"\n",(0,s.jsx)(t.h5,{id:"params",children:"params"}),"\n",(0,s.jsx)(t.p,{children:"An object for passing arbitrary property values for Podium to use."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note"}),": When using any of the supported HTTP frameworks, ",(0,s.jsx)(t.code,{children:"params"})," is usually\npicked up from a special properties object on the request (eg. ",(0,s.jsx)(t.code,{children:"res.locals"})," in\nExpress.js). Please see the the relevant plugin for the appropriate HTTP\nframework for further information."]}),"\n",(0,s.jsxs)(t.p,{children:["One very common use case for this is to pass a request bound property to a\ncontext parser. There are cases where you may want to perform operations on\nrequests prior to running the ",(0,s.jsx)(t.code,{children:".middleware()"})," or ",(0,s.jsx)(t.code,{children:".process()"})," methods in a\nlayout or podlet and then pass the results of these operations on to a context\nparser."]}),"\n",(0,s.jsx)(t.p,{children:"The locale context parser does this when setting the request bound locale value:"}),"\n",(0,s.jsxs)(r.Z,{groupId:"server-frameworks",children:[(0,s.jsx)(i.Z,{value:"express",label:"Express",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const app = express();\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Set a locale param to 'nb-NO' on res.locals\napp.use((req, res, next) => {\n    res.locals = {\n        locale: 'nb-NO',\n    };\n    next();\n});\n\n// Attach the middleware on Express. This will create HttpIncoming under the\n// hood plus generate the context where the locale param will be picked up from\n// res.locals\napp.use(layout.middleware());\n\napp.get('/', (req, res) => {\n    // Get the HttpIncoming object generated by the layout.middleware()\n    let incoming = res.locals.podium;\n\n    // Pass HttpIncoming on to the fetch method. This will pass the generated\n    // context where locale now is `nb-NO` on to the request to the podlet.\n    const { content } = await podlet.fetch(incoming);\n\n    [ ... snip ...]\n});\n"})})}),(0,s.jsx)(i.Z,{value:"hapi",label:"Hapi",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const app = Hapi.Server({\n    host: 'localhost',\n    port: 7000,\n});\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Register the Hapi Layout Plugin. This will create HttpIncoming under the\n// hood plus generate the context where the locale param will be picked up from\n// request.app.params\napp.register({\n    plugin: new HapiLayout(),\n    options: layout,\n});\n\n// Set a locale param to 'nb-NO' on request.app.params\napp.ext({\n    type: 'onRequest',\n    method: async (request, h) => {\n        request.app.params = {\n            locale: 'nb-NO',\n        };\n        return h.continue;\n    },\n});\n\napp.route({\n    method: 'GET',\n    path: layout.pathname(),\n    handler: (request, h) => {\n        // Get the HttpIncoming object generated by the pre-hook in the plugin\n        let incoming = request.app.podium;\n\n        // Pass HttpIncoming on to the fetch method. This will pass the generated\n        // context where locale now is `nb-NO` on to the request to the podlet.\n        const { content } = await podlet.fetch(incoming);\n\n        [ ... snip ...]\n    },\n});\n"})})}),(0,s.jsx)(i.Z,{value:"fastify",label:"Fastify",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const app = fastify();\n\nconst layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\n// Register the Fastify Layout Plugin. This will create HttpIncoming under the\n// hood plus generate the context where the locale param will be picked up from\n// reply.app.params\napp.register(FastifyLayout, layout);\n\n// Set a locale param to 'nb-NO' on reply.app.params\napp.addHook('onRequest', (request, reply, next) => {\n    reply.app.params = {\n        locale: 'nb-NO',\n    };\n    next()\n})\n\napp.get(layout.pathname(), async (request, reply) => {\n    // Get the HttpIncoming object generated by the pre-hook in the plugin\n    const incoming = reply.app.podium;\n\n    // Pass HttpIncoming on to the fetch method. This will pass the\n    // generated context on to the request to the podlet.\n    const { content } = await podlet.fetch(incoming);\n\n    [ ... snip ...]\n});\n"})})}),(0,s.jsx)(i.Z,{value:"http",label:"HTTP",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const layout = new Layout({\n    name: 'myLayout',\n    pathname: '/',\n});\n\nconst podlet = layout.client.register({\n    name: 'myPodlet',\n    uri: 'http://localhost:7100/manifest.json',\n});\n\nconst server = http.createServer(async (req, res) => {\n    // Create a HttpIncoming object and set a locale param to 'nb-NO'\n    let incoming = new HttpIncoming(req, res, {\n        locale: 'nb-NO',\n    });\n\n    // Pass HttpIncoming on to the layout processor. This will generate\n    // the context where the local parser will read the locale parameter\n    // from HttpIncoming.\n    incoming = await layout.process(incoming);\n\n    // Pass HttpIncoming on to the fetch method. This will pass the generated\n    // context where locale now is `nb-NO` on to the request to the podlet.\n    const { content } = await podlet.fetch(incoming);\n\n    [ ... snip ...]\n});\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.p,{children:"An HttpIncoming instance has the following properties:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"property"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"getter"}),(0,s.jsx)(t.th,{children:"setter"}),(0,s.jsx)(t.th,{children:"default"}),(0,s.jsx)(t.th,{children:"details"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"development"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"false"})}),(0,s.jsx)(t.td,{children:"Hint regarding whether the podlet / layout are in development mode or not"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"response"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"http.ServerResponse"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"null"})}),(0,s.jsxs)(t.td,{children:["A raw Node.js HTTP response object set through the ",(0,s.jsx)(t.code,{children:"response"})," argument in the constructor"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"request"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"http.IncomingMessage"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"null"})}),(0,s.jsxs)(t.td,{children:["A raw Node.js HTTP request object set through the ",(0,s.jsx)(t.code,{children:"request"})," argument in the constructor"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"context"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"object"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"{}"})}),(0,s.jsx)(t.td,{children:"The context created by the context parser"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"podlets"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"array"})}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"null"})}),(0,s.jsxs)(t.td,{children:["Array of client response objects. Used in ",(0,s.jsx)(t.code,{children:"@podium/layout"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"params"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"object"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"{}"})}),(0,s.jsxs)(t.td,{children:["Params set through the ",(0,s.jsx)(t.code,{children:"params"})," argument in the constructor"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"proxy"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"boolean"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"false"})}),(0,s.jsx)(t.td,{children:"Whether the request was handled by the proxy or not"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"name"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"string"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"''"})}),(0,s.jsx)(t.td,{children:"The name of the podlet / layout"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"view"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"object"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"{}"})}),(0,s.jsx)(t.td,{children:"View parameters for the document template"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"url"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"URL"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"{}"})}),(0,s.jsx)(t.td,{children:"A URL object created out of the original request"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"css"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"array"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"[]"})}),(0,s.jsxs)(t.td,{children:["An array of ",(0,s.jsx)(t.a,{href:"/docs/api/assets#assetcss",children:"AssetCSS"})," objects"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"js"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"array"})}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:"\u2713"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"[]"})}),(0,s.jsxs)(t.td,{children:["An array of ",(0,s.jsx)(t.a,{href:"/docs/api/assets#assetjs",children:"AssetJS"})," objects"]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.p,{children:"An HttpIncoming instance has the following methods:"}),"\n",(0,s.jsx)(t.h3,{id:"tojson",children:".toJSON()"}),"\n",(0,s.jsxs)(t.p,{children:["Returns JSON representation of the ",(0,s.jsx)(t.code,{children:"HttpIncoming"})," instance."]})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>i});n(7294);var s=n(6010);const o={tabItem:"tabItem_Ymn6"};var r=n(5893);function i(e){let{children:t,hidden:n,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.Z)(o.tabItem,i),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var s=n(7294),o=n(6010),r=n(2466),i=n(6550),a=n(469),l=n(1980),c=n(7392),d=n(12);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:o}}=e;return{value:t,label:n,attributes:s,default:o}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function j(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=p(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r}))),[c,h]=m({queryString:n,groupId:o}),[j,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,d.Nk)(n);return[o,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),g=(()=>{const e=c??j;return u({value:e,tabValues:r})?e:null})();(0,a.Z)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,r]),tabValues:r}}var x=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(5893);function f(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),o=a[n].value;o!==s&&(c(t),i(o))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>l.push(e),onKeyDown:h,onClick:d,...r,className:(0,o.Z)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function b(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function w(e){const t=j(e);return(0,y.jsxs)("div",{className:(0,o.Z)("tabs-container",g.tabList),children:[(0,y.jsx)(f,{...e,...t}),(0,y.jsx)(b,{...e,...t})]})}function v(e){const t=(0,x.Z)();return(0,y.jsx)(w,{...e,children:h(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var s=n(7294);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);