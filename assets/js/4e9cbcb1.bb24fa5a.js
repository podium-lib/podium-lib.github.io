"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1240],{7167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=t(5893),s=t(1151);const r={id:"dynamic_routes",title:"Passing URL params and query string values to podlets"},o=void 0,i={id:"layout/dynamic_routes",title:"Passing URL params and query string values to podlets",description:"There are occasions where you will want user interaction in a podlet to inform the behavior of other podlets. A great example of this is search. You might have one podlet that handles user search input and another podlet that displays search results.",source:"@site/docs/layout/dynamic_routes.md",sourceDirName:"layout",slug:"/layout/dynamic_routes",permalink:"/docs/layout/dynamic_routes",draft:!1,unlisted:!1,editUrl:"https://github.com/podium-lib/podium-lib.github.io/tree/main/website/docs/docs/layout/dynamic_routes.md",tags:[],version:"current",frontMatter:{id:"dynamic_routes",title:"Passing URL params and query string values to podlets"},sidebar:"sidebar",previous:{title:"Handling podlet unavailability",permalink:"/docs/layout/unavailable_podlets"},next:{title:"Assets",permalink:"/docs/layout/assets"}},c={},l=[{value:"Sending query params",id:"sending-query-params",level:2},{value:"Sending a pathname",id:"sending-a-pathname",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"There are occasions where you will want user interaction in a podlet to inform the behavior of other podlets. A great example of this is search. You might have one podlet that handles user search input and another podlet that displays search results."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const searchField = layout.client.register({\n    name: 'searchField',\n    uri: 'http://localhost:7200',\n});\n\nconst searchResults = layout.client.register({\n    name: 'searchResults',\n    uri: 'http://localhost:7201',\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The recommended way for the ",(0,a.jsx)(n.code,{children:"searchResults"})," podlet to react to user changes in the ",(0,a.jsx)(n.code,{children:"searchField"})," is to manipulate the pages URL query string parameters or pathname param."]}),"\n",(0,a.jsx)(n.h2,{id:"sending-query-params",children:"Sending query params"}),"\n",(0,a.jsxs)(n.p,{children:["The Podium context is not the only way for a layout to communicate with its podlets. Query params can be forwarded to podlets via ",(0,a.jsx)(n.code,{children:".fetch()"})," calls."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const content = podlet.fetch(incoming, { query: { search: req.query.search } });\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Continuing with our search example, when a request comes in to the layout at ",(0,a.jsx)(n.code,{children:"http://localhost:7101?search=houses"}),", we forward the query parameter ",(0,a.jsx)(n.code,{children:"search"})," on to both podlets."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const content = await Promise.all([\n    searchField.fetch(incoming, { query: { search: req.query.search } }),\n    searchResults.fetch(incoming, { query: { search: req.query.search } }),\n]);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Our podlets will then have access to the value of ",(0,a.jsx)(n.code,{children:"search"})," and be able to render content accordingly. Likewise, in order to trigger changes, all a podlet will need to do is navigate the page to ",(0,a.jsx)(n.code,{children:"http://localhost:7101?search=houses"}),".\nThe ",(0,a.jsx)(n.code,{children:"searchField"})," podlet could do this by creating a form."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<form action="http://localhost:7101" method="GET">\n    <input type="text" name="search" /> <input type="submit" />\n</form>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"sending-a-pathname",children:"Sending a pathname"}),"\n",(0,a.jsxs)(n.p,{children:["Another way to send dynamic queries to podlets is by sending along a ",(0,a.jsx)(n.code,{children:"pathname"})," option. This can be used, for example, to build podlet URLs that are defined using named route parameters."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example: sending podlet content route with named parameter"})}),"\n",(0,a.jsx)(n.p,{children:"In the layout."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const content = podlet.fetch(incoming, { pathname: '/andrew' });\n"})}),"\n",(0,a.jsx)(n.p,{children:"In the podlet."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"app.get('/:name', (req, res) => {\n    // req.params.name => andrew\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It is important to note here that the ",(0,a.jsx)(n.code,{children:"pathname"})," value is appended to the content route so if you were to serve your content route at ",(0,a.jsx)(n.code,{children:"/content"})," instead of at ",(0,a.jsx)(n.code,{children:"/"})," the final URL sent to the podlet would include this."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const podlet = new Podlet({\n    content: '/content',\n});\napp.get('/content/:name', (req, res) => {\n    // req.params.name => andrew\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You are, in fact, free to handle any routes you like under ",(0,a.jsx)(n.code,{children:"content"})," namespace. The following is also valid."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// include `/name` when defining `pathname`\nconst content = podlet.fetch(incoming, { pathname: '/name/andrew' });\n\nconst podlet = new Podlet({\n    content: '/content',\n});\napp.get('/content/name/:name', (req, res) => {\n    // req.params.name => andrew\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var a=t(7294);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);